(function () {
  'use strict';

  class SoundTrack {
    constructor(sound) {
      this.sound = sound;
    }

    play() {
      this.sound.play();
    }
  }

  const soundTrack = new SoundTrack(document.getElementById('tick'));

  class Timer {
    constructor(DOMElement, time = 1500, soundTick = false, endTimeHandler) {
      this.element = DOMElement;
      this.intervalCursor = null;
      this.ticking = false;
      this.currentSeconds = time;
      this.soundTick = soundTick;
      this.onEnd = endTimeHandler;
      this._set(this.currentSeconds);
    }

    tick() {
      if(this.soundTick) soundTrack.play();
      this.currentSeconds--;
      if (this.currentSeconds === 0) {
        this.onEnd();
      } else {
        this._set(this.currentSeconds);
      }
    }

    start() {
      this.timerIntervalCursor = setInterval(this.tick.bind(this), 1000);
      this.ticking = true;
    }

    stop() {
      clearInterval(this.timerIntervalCursor);
      this.timerIntervalCursor = null;
      this.ticking = false;
    }

    updateSettings(soundTick) {
      this.soundTick = soundTick;
    }

    updateTime(time) {
      this.currentSeconds = time;
      if (!this.ticking) this._set(this.currentSeconds);
    }

    getTicking() {
      return this.ticking;
    }

    _set(countTime) {
      let minutes = Math.floor(countTime / 60);
      let seconds = countTime % 60;

      if (seconds < 10) {
          seconds = "0" + seconds;
      }

      if (minutes < 10) {
          minutes = "0" + minutes;
      }

      this.element.textContent = `${minutes}:${seconds}`;
    }
  }

  class Counter {
    constructor (DOMElement, value = 0) {
      this.element = DOMElement;
      this.element.textContent = value;
    }

    set (value) {
      this.element.textContent = value;
    }
  }

  class PlayPauseButton {
    constructor (DOMElement, onClickHandler) {
      this.button = DOMElement;
      this.button.addEventListener('click', onClickHandler);
    };

    setState(state = pause) {
      if (state === 'play') {
        this.button.classList.add('control-timer-button--play');
        this.button.classLIst.remove('control-timer-buttom--pause');
      } else {
        this.button.classList.add('control-timer-buttom--pause');
        this.button.classLIst.remove('control-timer-button--play');
      }
    }

    toggle() {
      this.button.classList.toggle('control-timer-button--play');
        this.button.classList.toggle('control-timer-buttom--pause');
    }

    focus() {
      this.button.focus(); 
    }
  }

  class SkipButton {
    constructor(DOMElement, onClickHandler) {
      this.button = DOMElement;
      this.button.addEventListener('click', onClickHandler);
    }
  }

  class SettingsButton {
    constructor(DOMElement, onClickHandler) {
      this.element = DOMElement;
      this.element.addEventListener('click', onClickHandler);
    }
  }

  class Settings {
    constructor() {
      const defaultSettings = {
        stepMinutes: 25,
        breakMinutes: 5,
        bigBreakMinutes: 20,
        stepsRoundCount: 2,
        stepsDayCount: 8,
        soundNotification: false,
        soundTick: false,
        notification: false,
        language: 'ua'
      };

      this.languagePack = {
        ua: {
          'stepMinutes': 'КРОК',
          'breakMinutes': 'ПАУЗА',
          'bigBreakMinutes': 'ВЕЛИКА ПАУЗА',
          'stepsRoundCount': 'КРОКІВ ДО ВЕЛИКОЇ ПАУЗИ',
          'stepsDayCount': 'КРОКІВ ЗАПЛАНОВАНО',
          'soundNotification': 'ЗВУКОВЕ СПОВІЩЕННЯ',
          'soundTick': 'ЗВУК ТАЙМЕРА',
          'notification': 'СПОВІЩЕННЯ'
        },
        eng: {
          'stepMinutes': 'STEP TIME',
          'breakMinutes': 'BREAK TIME',
          'bigBreakMinutes': 'BIG BREAK TIME',
          'stepsRoundCount': 'STEPS ROUND COUNT',
          'stepsDayCount': 'STEPS DAY COUNT',
          'soundNotification': 'SOUND NOTIFICATION',
          'soundTick': 'SOUND TICK',
          'notification': 'NOTIFICATION'
        }
      };

      if(Settings.isLocaleStorageEnabled()) {
        if (localStorage.getItem('settings') === null){
          localStorage.setItem('settings', JSON.stringify(defaultSettings));
        }
        this.state =  JSON.parse(localStorage.getItem('settings'));
      } else {
        this.state = defaultSettings;
      }
      this.updateListeners = [];
    }

    static isLocaleStorageEnabled() {
      try {
        localStorage.setItem('LSEnabled', 'enabled');
        localStorage.removeItem('LSEnabled');
        return true;
      } catch (error) {
        console.log(`Try to use localStorage: ${error}`);
        return false;
      }
    };

    addEventListener(eventType, callback) {
      if (eventType === 'update') {
        this.updateListeners.push(callback);
      }
    }

    get() {
      return this.state;
    }

    set(settings = this.state) {
      if(Settings.isLocaleStorageEnabled()) {
        localStorage.setItem('settings', JSON.stringify(settings));
      }

      this.state = settings;
      this.updateListeners.forEach(callback => {
        callback();
      });
    };

    get stepMinutes () {
      return this.state.stepMinutes;
    }

    get breakMinutes () {
      return this.state.breakMinutes;
    }

    get bigBreakMinutes () {
      return this.state.bigBreakMinutes;
    }

    get stepsRoundCount () {
      return this.state.stepsRoundCount;
    }

    get stepsDayCount () {
      return this.state.stepsDayCount;
    }

    get soundNotification () {
      return this.state.soundNotification;
    }

    get soundTick () {
      return this.state.soundTick;
    }

    get notification () {
      return this.state.notification;
    }

    get language () {
      return this.state.language;
    }

    getLanguagePack (language = 'ua') {
      return this.languagePack[language];
    }
  }

  class Checkbox {
    constructor(DOMElement, value = false, onChangeHandler) {
      this.element = DOMElement;
      this.element.addEventListener('change', onChangeHandler);
      value ? this.element.checked = true : this.element.checked = false;
    }

    getValue() {
      return this.element.checked ? true : false;
    }

    setValue(value = false) {
      value ? this.element.checked = true : this.element.checked = false;
    }
  }

  class InputNumber {
    constructor(DOMElement, value = 0, onChangeHandler) {
      this.MAX_VALUE = 99;
      this.element = DOMElement;
      this.decButton = this.element.querySelector('.input-number__decrement-button');
      this.decButton.addEventListener('click', this.decrementValue.bind(this));
      this.incButton = this.element.querySelector('.input-number__increment-button');
      this.incButton.addEventListener('click', this.incrementValue.bind(this));
      this.input = this.element.querySelector('.input-number__input');
      this.input.oninput = onChangeHandler;
      this.onChangeHandler = onChangeHandler;
      this.input.value = value;
    };

    getValue() {
      return Number.parseInt(this.input.value);
    };

    setValue(value = 0) {
      this.input.value = value;

    };

    changeValue(evt) {
      if (Number.isNaN(evt.target.value)) {
        this.input.value = 0;
        return;
      }
      if (evt.target.value < 0) {
        this.input.value = 0;
      } else if (evt.target.value > this.MAX_VALUE) {
        this.input.value = this.MAX_VALUE;
      } else {
        this.input.value = evt.target.value;
      }
    };

    decrementValue() {
      if(this.getValue() > 0) {
        this.setValue(this.getValue() - 1);
        this.onChangeHandler();
      }
    };

    incrementValue() {
      if (this.getValue() < this.MAX_VALUE) {
        this.setValue(this.getValue() + 1);
        this.onChangeHandler();
      }
    };
  }

  class LanguagePanel {
    constructor(DOMElement, language = 'ua', onChangeLanguage) {
      this.element = DOMElement;
      this.uaButton = document.getElementById('languageUA');
      this.engButton = document.getElementById('languageENG');
      this.uaButton.addEventListener('click', this.changeLanguage.bind(this));
      this.engButton.addEventListener('click', this.changeLanguage.bind(this));
      this.onChangeLanguage = onChangeLanguage;
      if(language === 'ua') {
        this.uaButton.setAttribute('disabled', null);
      } else {
        this.engButton.setAttribute('disabled', null);
      }
      this.currentLanguage = language;
    };

    changeLanguage(evt) {
      this.engButton.removeAttribute('disabled');
      this.uaButton.removeAttribute('disabled');
      evt.target.setAttribute('disabled', null);
      this.currentLanguage = evt.target.textContent.toLowerCase();
      this.onChangeLanguage(this.currentLanguage);
    };

    getLanguage() {
      return this.currentLanguage;
    };
  }

  class SettingsModal {
    constructor(DOMElement, settings) {
      this.settings = settings;
      this.element = DOMElement;

      this.closeButton = this.element.querySelector('.settings__close-button');
      this.closeButton.addEventListener('click', this.hide.bind(this));

      this.languagePanel = new LanguagePanel(this.element.querySelector('.settings'), settings.language, this.changeLanguage.bind(this));

      this.stepMinutes = new InputNumber(document.getElementById('stepTime'), this.settings.stepMinutes, this.change.bind(this));
      this.breakMinutes = new InputNumber(document.getElementById('breakTime'), this.settings.breakMinutes, this.change.bind(this));
      this.bigBreakMinutes = new InputNumber(document.getElementById('bigBreakTime'), this.settings.bigBreakMinutes, this.change.bind(this));
      this.stepsRoundCount = new InputNumber(document.getElementById('stepsRoundCount'), this.settings.stepsRoundCount, this.change.bind(this));
      this.stepsDayCount = new InputNumber(document.getElementById('stepsDayCount'), this.settings.stepsDayCount, this.change.bind(this));

      this.soundNotification = new Checkbox(document.getElementById('soundNotification'), this.settings.soundNotification, this.change.bind(this));
      this.soundTick = new Checkbox(document.getElementById('soundTick'), this.settings.soundTick, this.change.bind(this));
      this.notifictaion = new Checkbox(document.getElementById('notification'), this.settings.notification, this.change.bind(this));

      this.changeLanguage(this.settings.language);
    };

    show() {
      this.element.classList.remove('modal-hide');
      document.addEventListener('keydown', this.onEscDown.bind(this));
    };

    hide() {
      this.element.classList.add('modal-hide');
      document.removeEventListener('keydown', this.onEscDown);
    };

    onEscDown(evt) {
      if (evt.code === 'Escape') {
        this.hide();
      }
    }

    change(evt) {
      const newSettings = {
        stepMinutes: this.stepMinutes.getValue(),
        breakMinutes: this.breakMinutes.getValue(),
        bigBreakMinutes: this.bigBreakMinutes.getValue(),
        stepsRoundCount: this.stepsRoundCount.getValue(),
        stepsDayCount: this.stepsDayCount.getValue(),
        soundNotification: this.soundNotification.getValue(),
        soundTick: this.soundTick.getValue(),
        notification: this.notifictaion.getValue(),
        language: this.languagePanel.getLanguage()
      };
      this.settings.set(newSettings);
    };

    changeLanguage(language) {
      const languagePack = this.settings.getLanguagePack(language);
      document.getElementById('stepTimeLabel').textContent = languagePack.stepMinutes;
      document.getElementById('breakTimeLabel').textContent = languagePack.breakMinutes;
      document.getElementById('bigBreakTimeLabel').textContent = languagePack.bigBreakMinutes;
      document.getElementById('stepsRoundCountLabel').textContent = languagePack.stepsRoundCount;
      document.getElementById('stepsDayCountLabel').textContent = languagePack.stepsDayCount;
      document.getElementById('soundNotificationLabel').textContent = languagePack.soundNotification;
      document.getElementById('soundTickLabel').textContent = languagePack.soundTick;
      document.getElementById('notificationLabel').textContent = languagePack.notification;
      this.change();
    };
  }

  const updateSettings = () => {
    timer.updateSettings(settings.soundTick);
  };

  const soundTrack$1 = new SoundTrack(document.getElementById('action'));

  const settings = new Settings();
  settings.addEventListener('update', updateSettings);

  let currentState = "step";
  let currentStep = 0;
  let stepsInRound = 0;

  const onEndTime = () => {
    if (soundNotification) soundTrack$1.play();

    if (currentState === 'step') {
      currentStep++;
      counter.set(currentStep);
      if (stepsInRound === Number.parseInt(settings.stepsRoundCount)) {
        stepsInRound = 0;
        currentState = 'bigBreak';
        timer.updateTime(settings.bigBreakMinutes * 60);
      } else {
        stepsInRound++;
        currentState = 'break';
        timer.updateTime(settings.breakMinutes * 60);
      }
    } else {
      currentState = 'step';
      timer.updateTime(settings.stepMinutes * 60);
    }
  };

  const controlTimer = () => {
    playPauseButton.toggle();
    if(timer.getTicking()) {
      timer.stop();
    } else {
      timer.start();
    }
  };

  const skipAction = () => {
    onEndTime();
  };

  const timer = new Timer(document.querySelector('.timer'), (settings.stepMinutes * 60), settings.soundTick, onEndTime);
  const counter = new Counter(document.querySelector('.counter'), currentStep);
  const playPauseButton = new PlayPauseButton(document.querySelector('.control-timer-button'), controlTimer);
  const skipButton = new SkipButton(document.querySelector('.skip-button'), skipAction);
  const settingsElement = new SettingsModal(document.querySelector('.settings'), settings);
  const settingsOpenButton = new SettingsButton(document.querySelector('.settings-button'), settingsElement.show.bind(settingsElement));

  window.onload = () => {
    playPauseButton.focus();
  };

}());

//# sourceMappingURL=main.min.js.map
